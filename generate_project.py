import os

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
file_contents = {}

file_contents["src/index.js"] = """
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import './App.css';

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
"""

file_contents["src/App.jsx"] = """
import React, { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Onboarding from './pages/Onboarding';
import Home from './pages/Home';
import Leaderboard from './pages/Leaderboard';
import Achievements from './pages/Achievements';
import { useTelegram } from './hooks/useTelegram';

const App = () => {
  const { tg } = useTelegram();
  const isOnboarded = localStorage.getItem('onboarded');

  useEffect(() => {
    tg.ready();
  }, [tg]);

  return (
    <Router>
      <Routes>
        {!isOnboarded && (
          <Route path="/" element={<Onboarding />} />
        )}
        <Route path="/home" element={<Home />} />
        <Route path="/leaderboard" element={<Leaderboard />} />
        <Route path="/achievements" element={<Achievements />} />
        <Route path="*" element={<Navigate to={isOnboarded ? "/home" : "/"} />} />
      </Routes>
    </Router>
  );
};

export default App;
"""

file_contents["src/hooks/useTelegram.js"] = """
import { useEffect } from 'react';

export function useTelegram() {
  const tg = window.Telegram.WebApp;

  useEffect(() => {
    tg.ready();
  }, [tg]);

  const onClose = () => {
    tg.close();
  };

  const onToggleMainButton = () => {
    if (tg.MainButton.isVisible) {
      tg.MainButton.hide();
    } else {
      tg.MainButton.show();
    }
  };

  return {
    tg,
    onClose,
    onToggleMainButton,
    user: tg.initDataUnsafe?.user,
  };
}
"""

# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
file_contents["src/components/Header.jsx"] = """
import React from 'react';
import './Header.css';

const Header = ({ title }) => {
  const handleBack = () => {
    window.history.back();
  };

  return (
    <header className="app-header">
      <button className="back-button" onClick={handleBack}>
        &larr; –ù–∞–∑–∞–¥
      </button>
      <h1>{title}</h1>
    </header>
  );
};

export default Header;
"""

file_contents["src/components/FooterNav.jsx"] = """
import React from 'react';
import { useNavigate } from 'react-router-dom';
import './FooterNav.css';

const FooterNav = () => {
  const navigate = useNavigate();

  return (
    <nav className="footer-nav">
      <button onClick={() => navigate('/home')}>–ì–ª–∞–≤–Ω–∞—è</button>
      <button onClick={() => navigate('/leaderboard')}>–õ–∏–¥–µ—Ä–±–æ—Ä–¥</button>
      <button onClick={() => navigate('/achievements')}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</button>
    </nav>
  );
};

export default FooterNav;
"""

file_contents["src/components/OnboardingStep.jsx"] = """
import React from 'react';
import './OnboardingStep.css';

const OnboardingStep = ({ stepNumber, imageSrc, title, description, onNext, onBack, isLast }) => {
  return (
    <div className="onboarding-step">
      <div className="step-indicator">
        –®–∞–≥ {stepNumber} –∏–∑ 3
      </div>
      <img src={imageSrc} alt={title} className="onboarding-image" />
      <h2>{title}</h2>
      <p>{description}</p>
      <div className="onboarding-buttons">
        {stepNumber > 1 && <button onClick={onBack}>–ù–∞–∑–∞–¥</button>}
        <button onClick={onNext}>{isLast ? '–ù–∞—á–∞—Ç—å' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}</button>
      </div>
    </div>
  );
};

export default OnboardingStep;
"""

file_contents["src/components/ContestCard.jsx"] = """
import React from 'react';
import './ContestCard.css';

const ContestCard = ({ contest }) => {
  const handleCopyLink = () => {
    navigator.clipboard.writeText('https://t.me/yourbot?start=referralCode');
    alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
  };

  return (
    <div className="contest-card">
      <div className="contest-info">
        <h4>{contest.name}</h4>
        <p>{contest.participants} —á–µ–ª.</p>
        <p>–û—Å—Ç–∞–ª–æ—Å—å: {contest.timeRemaining}</p>
      </div>
      <button onClick={handleCopyLink}>–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
    </div>
  );
};

export default ContestCard;
"""

file_contents["src/components/LeaderboardEntry.jsx"] = """
import React from 'react';
import './LeaderboardEntry.css';

const LeaderboardEntry = ({ rank, entry }) => {
  return (
    <div className={\`leaderboard-entry \${entry.isCurrentUser ? 'current-user' : ''}\`}>
      <span className="rank">{rank}</span>
      <span className="username">{entry.username}</span>
      <span className="referrals">{entry.referrals} —á–µ–ª.</span>
    </div>
  );
};

export default LeaderboardEntry;
"""

file_contents["src/components/AchievementCard.jsx"] = """
import React from 'react';
import './AchievementCard.css';

const AchievementCard = ({ achievement }) => {
  return (
    <div className="achievement-card">
      <div className="reward">{achievement.reward}</div>
      <div className="achievement-info">
        <h4>{achievement.title}</h4>
        <p>{achievement.description}</p>
      </div>
    </div>
  );
};

export default AchievementCard;
"""

# –°—Ç—Ä–∞–Ω–∏—Ü—ã
file_contents["src/pages/Onboarding.jsx"] = """
import React, { useState } from 'react';
import OnboardingStep from '../components/OnboardingStep';
import step1Image from '../assets/step1.svg'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
import step2Image from '../assets/step2.svg';
import step3Image from '../assets/step3.svg';
import './Onboarding.css';

const Onboarding = () => {
  const [currentStep, setCurrentStep] = useState(1);

  const steps = [
    {
      imageSrc: step1Image,
      title: '–°–æ–∑–¥–∞–π—Ç–µ –≤–∞—à—É —Å—Å—ã–ª–∫—É',
      description: '–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π.',
    },
    {
      imageSrc: step2Image,
      title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π',
      description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—ã.',
    },
    {
      imageSrc: step3Image,
      title: '–í—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã',
      description: '–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–∞–ª–ª—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã, –∫–æ–≥–¥–∞ –≤–∞—à–∏ –¥—Ä—É–∑—å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è.',
    },
  ];

  const handleNext = () => {
    if (currentStep < steps.length) {
      setCurrentStep((prev) => prev + 1);
    } else {
      localStorage.setItem('onboarded', 'true');
      window.location.href = '/home';
    }
  };

  const handleBack = () => {
    if (currentStep > 1) {
      setCurrentStep((prev) => prev - 1);
    }
  };

  const { imageSrc, title, description } = steps[currentStep - 1];

  return (
    <OnboardingStep
      stepNumber={currentStep}
      imageSrc={imageSrc}
      title={title}
      description={description}
      onNext={handleNext}
      onBack={handleBack}
      isLast={currentStep === steps.length}
    />
  );
};

export default Onboarding;
"""

file_contents["src/pages/Home.jsx"] = """
import React, { useState } from 'react';
import Header from '../components/Header';
import FooterNav from '../components/FooterNav';
import ContestCard from '../components/ContestCard';
import './Home.css';
import { useTelegram } from '../hooks/useTelegram';
import axios from 'axios';

const Home = () => {
  const { tg } = useTelegram();
  const [contests, setContests] = useState([
    {
      id: 1,
      name: '–ö–æ–Ω–∫—É—Ä—Å 1',
      participants: 914,
      timeRemaining: '2 –¥–Ω—è',
    },
    // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  ]);

  const handleCreateLink = async () => {
    try {
      const response = await axios.post('https://your-backend-api.com/generate-link', {
        userId: tg.initDataUnsafe?.user?.id,
      });
      const referralLink = response.data.link;
      tg.sendData(JSON.stringify({ action: 'create_link', link: referralLink }));
      alert('–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–æ—Ç—É.');
    } catch (error) {
      console.error(error);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.');
    }
  };

  return (
    <div className="page">
      <Header title="Referee Bot" />
      <div className="home-content">
        <h2>–ü—Ä–∏–≤–µ—Ç! üëã</h2>
        <button className="create-link-button" onClick={handleCreateLink}>
          –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É
        </button>
        <h3>–ê–∫—Ç–∏–≤–Ω—ã–µ –ö–æ–Ω–∫—É—Ä—Å—ã</h3>
        {contests.map((contest) => (
          <ContestCard key={contest.id} contest={contest} />
        ))}
      </div>
      <FooterNav />
    </div>
  );
};

export default Home;
"""

file_contents["src/pages/Leaderboard.jsx"] = """
import React, { useEffect, useState } from 'react';
import Header from '../components/Header';
import FooterNav from '../components/FooterNav';
import LeaderboardEntry from '../components/LeaderboardEntry';
import './Leaderboard.css';
import axios from 'axios';
import { useTelegram } from '../hooks/useTelegram';

const Leaderboard = () => {
  const { tg } = useTelegram();
  const [leaderboard, setLeaderboard] = useState([]);

  useEffect(() => {
    const fetchLeaderboard = async () => {
      try {
        const response = await axios.get('https://your-backend-api.com/leaderboard');
        setLeaderboard(response.data);
      } catch (error) {
        console.error(error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞.');
      }
    };

    fetchLeaderboard();
  }, []);

  return (
    <div className="page">
      <Header title="Referee Bot" />
      <div className="leaderboard-content">
        <h3>–õ–∏–¥–µ—Ä–±–æ—Ä–¥</h3>
        {leaderboard.map((entry, index) => (
          <LeaderboardEntry key={entry.userId} rank={index + 1} entry={entry} />
        ))}
      </div>
      <FooterNav />
    </div>
  );
};

export default Leaderboard;
"""

file_contents["src/pages/Achievements.jsx"] = """
import React, { useEffect, useState } from 'react';
import Header from '../components/Header';
import FooterNav from '../components/FooterNav';
import AchievementCard from '../components/AchievementCard';
import './Achievements.css';
import axios from 'axios';
import { useTelegram } from '../hooks/useTelegram';

const Achievements = () => {
  const { tg } = useTelegram();
  const [achievements, setAchievements] = useState([]);

  useEffect(() => {
    const fetchAchievements = async () => {
      try {
        const response = await axios.get('https://your-backend-api.com/achievements', {
          params: { userId: tg.initDataUnsafe?.user?.id }
        });
        setAchievements(response.data);
      } catch (error) {
        console.error(error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö.');
      }
    };

    fetchAchievements();
  }, []);

  return (
    <div className="page">
      <Header title="Referee Bot" />
      <div className="achievements-content">
        <h3>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
        {achievements.map((achievement) => (
          <AchievementCard key={achievement.id} achievement={achievement} />
        ))}
      </div>
      <FooterNav />
    </div>
  );
};

export default Achievements;
"""

# CSS —Ñ–∞–π–ª—ã (–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∏–ª–µ–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
file_contents["src/App.css"] = """
body {
  background-color: #121212;
  color: #ffffff;
  margin: 0;
  font-family: Arial, sans-serif;
}

.page {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.app-header, .footer-nav {
  background-color: #1f1f1f;
  padding: 10px;
}

.app-header h1, .footer-nav button {
  color: #ffffff;
}

.create-link-button {
  background-color: #ff8800;
  color: #ffffff;
  padding: 10px;
  border: none;
  border-radius: 5px;
}

.contest-card {
  background-color: #1e1e1e;
  padding: 15px;
  margin: 10px 0;
  border-radius: 5px;
}
"""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
def create_files():
    for filepath, content in file_contents.items():
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        directory = os.path.dirname(filepath)
        if not os.path.exists(directory):
            os.makedirs(directory)
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(content.strip())

if __name__ == "__main__":
    create_files()
    print("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.")

